<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:confluent-schema-registry="http://www.mulesoft.org/schema/mule/confluent-schema-registry"
	xmlns:kafka-consumption-sapi="http://www.mulesoft.org/schema/mule/kafka-consumption-sapi"
	xmlns:kafka="http://www.mulesoft.org/schema/mule/kafka" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/kafka http://www.mulesoft.org/schema/mule/kafka/current/mule-kafka.xsd
http://www.mulesoft.org/schema/mule/kafka-consumption-sapi http://www.mulesoft.org/schema/mule/kafka-consumption-sapi/current/mule-kafka-consumption-sapi.xsd
http://www.mulesoft.org/schema/mule/confluent-schema-registry http://www.mulesoft.org/schema/mule/confluent-schema-registry/current/mule-confluent-schema-registry.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
	<sub-flow name="replace-id-with-avro-schema" doc:id="c78d3042-8282-4566-935d-ef1591ef2bc4" >
		<confluent-schema-registry:replace-id-with-avro-schema doc:name="Replace id with AVRO schema" doc:id="33b2116a-ab2a-41f6-8d39-d5f58aad3bda" config-ref="Confluent_Schema_Registry_Connector_Config" />
	</sub-flow>
	<sub-flow name="process-tombstone-messages" doc:id="dc6d975e-0534-4096-81eb-d699f0893cab" >
		<kafka-consumption-sapi:delete-order-data doc:name="Delete order data" doc:id="b9c45d01-4260-439c-9d81-d7b13095d83b" config-ref="Kafka_consumption_sapi_Config" />
	</sub-flow>
	<sub-flow name="log-failed-messages" doc:id="c3f05e66-af6f-4ae4-b5ce-5435426b3ecb" >
		<kafka-consumption-sapi:log-failed-messages doc:name="Log failed messages" doc:id="5eff1200-4166-45f2-93fb-8a23c8d2cade" config-ref="Kafka_consumption_sapi_Config" />
	</sub-flow>
	<sub-flow name="call-consumption-sapi" doc:id="1d058ee3-9c99-472a-963b-7098f681581c" >
		<try doc:name="Try" doc:id="0464e303-9550-4c81-9267-b9a4a5dac657">
				<kafka-consumption-sapi:create-or-update-order-data doc:name="Create or update order data" doc:id="f101b381-a8ae-4e1a-acd6-7aea7e6838b3" config-ref="Kafka_consumption_sapi_Config" />
				<error-handler>
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="e30fd111-42fd-4fd2-b825-68e746e4e69f" when='#[(error.errorType.asString == "KAFKA-CONSUMPTION-SAPI:SERVICE_UNAVAILABLE") or (["CONNECTIVITY", "TIMEOUT"] contains error.errorType.identifier)]'>
					<logger level="INFO" doc:name="Logger" doc:id="4c1b57e7-a8c5-4c6c-ab6a-a0625ef0b07e" message="[#[vars.consumerCommitKey]] Sapi call failed due to irreproducible error, propagating error to parent flow."/>
				</on-error-propagate>
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="29d26ec4-fe98-4421-b7df-432d986b43ca" type="KAFKA-CONSUMPTION-SAPI:BAD_REQUEST">
						<set-variable value="#[true]" doc:name="sapiCallFailed = true" doc:id="382bfef2-a0a1-40ce-a45e-9b43d056143d" variableName="sapiCallFailed" />
						<set-variable value="#[error.muleMessage.typedValue.message default error.description]" doc:name="errorMessage" doc:id="1026ede4-dec8-4e6f-8794-1cf6a65d1d55" variableName="errorMessage" />
					<set-variable value="#[true]" doc:name="criticalError = true" doc:id="586f804b-fa0c-43ce-ba1f-6e2b2f1f0e35" variableName="criticalError"/>
				</on-error-continue>
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="aae1209f-2dc4-418b-bc39-0080384836f1" type="ANY">
						<set-variable value="#[true]" doc:name="sapiCallFailed = true" doc:id="1ddeacb5-98e6-4d8d-bb77-058213a95939" variableName="sapiCallFailed" />
						<set-variable value="#[error.muleMessage.typedValue.message default error.description]" doc:name="errorMessage" doc:id="e82832b8-b93b-4f8a-bd02-77ef35993b72" variableName="errorMessage" />
					</on-error-continue>
				</error-handler>
			</try>
	</sub-flow>
	<flow name="consume-orders" doc:id="3fb25c3e-6fa3-4bbd-9b16-251cf64cdc28" initialState="started">
		<kafka:batch-message-listener doc:name="Batch message listener" doc:id="67d66035-15da-4d39-a646-2ed455f588a9" config-ref="Apache_Kafka_Consumer_configuration" parallelConsumersAmount="2"/>
		<set-variable value="replace-id-with-avro-schema" doc:name="deserializationFlow" doc:id="f92e05aa-af8a-455d-99b3-ef68cbe3d00f" variableName="deserializationFlow"/>
		<set-variable value="call-consumption-sapi" doc:name="sapiFlowProcessRegularMessages" doc:id="1b9312c1-772a-4c6d-b927-9b4dc08f9b8b" variableName="sapiFlowProcessRegularMessages"/>
		<set-variable value="log-failed-messages" doc:name="sapiFlowLogFailedMessages" doc:id="ef724bb1-1c5d-44fc-ab46-05e483a639a5" variableName="sapiFlowLogFailedMessages" />
		<set-variable value="process-tombstone-messages" doc:name="sapiFlowProcessTombstoneMessages" doc:id="0a109fa7-680f-4f93-8831-b541f1136211" variableName="sapiFlowProcessTombstoneMessages"/>
		<set-variable value="consume-orders" doc:name="consumptionFlow" doc:id="f3e41c00-3af8-45d7-8f4b-22c1743c053e" variableName="consumptionFlow"/>
		<flow-ref doc:name="kafka-commons-main-consumption-steps" doc:id="253d36ca-309e-47e8-88a0-1f3b3c8f190b" name="kafka-commons-main-consumption-steps" />
		<kafka-consumption-sapi:log-correlation-id doc:name="Log correlation id" doc:id="5bb4bd8a-81f1-4891-93b8-f760f5a7b973" config-ref="Kafka_consumption_sapi_Config" correlation-id="#[correlationId]">
			<kafka-consumption-sapi:log-correlation-id-request-data ><![CDATA[#[topicName: p('kafka.topic')]]]></kafka-consumption-sapi:log-correlation-id-request-data>
		</kafka-consumption-sapi:log-correlation-id>
		<kafka:commit doc:name="Commit" doc:id="a2377337-31ad-4a73-a1b0-b5284f4bb152" config-ref="Apache_Kafka_Consumer_configuration" commitKey="#[vars.consumerCommitKey]"/>
		<flow-ref doc:name="kafka-commons-stop-consumption-flow" doc:id="5d3ec734-43fd-4cce-92f1-9da8afc4a0c9" name="kafka-commons-stop-consumption-flow" />
	</flow>
	<sub-flow name="publish-orders" doc:id="301ba35e-9bd9-4ea5-b641-f98205c78621">
		<parallel-foreach doc:name="Parallel For Each" doc:id="803cde2a-6629-4fc4-948a-26adbea6dae2">
			<set-variable value="#[payload.orderId]" doc:name="Set Variable" doc:id="e4d53384-495b-4650-90d4-9e2d05bfef46" variableName="topicKey" />
			<choice doc:name="Choice" doc:id="8fb07067-f414-4ead-92b1-9f01349e0d16">
				<when expression="#[payload.orderCanceled]">
					<set-payload value="#[null]" doc:name="Set Payload" doc:id="b1cb300c-0841-4fb3-8be2-d6690bad0218" />
				</when>
				<otherwise>
					<ee:transform doc:name="Transform Message" doc:id="343e2281-5d94-4438-b474-409f0caeb596">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/avro schemaUrl='classpath://orders.avsc'
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
					<confluent-schema-registry:replace-avro-schema-with-id doc:name="Replace AVRO schema with id" doc:id="18cdd6c3-bcfb-4229-b10d-57d2fb91b060" schemaId="1" subject="#[vars.topicKey]" config-ref="Confluent_Schema_Registry_Connector_Config" />
				</otherwise>
			</choice>
			<kafka:publish doc:name="Publish" doc:id="aebb1e86-2c05-4ab4-9737-7437463e88fd" config-ref="Apache_Kafka_Producer_configuration" topic="${kafka.topic}" key="#[vars.topicKey]" />
		</parallel-foreach>
		<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
"Order request accepted."]]></ee:set-payload>
            </ee:message>
        </ee:transform>
	</sub-flow>
	<sub-flow name="seek-orders" doc:id="c9b83d73-8cb0-474c-aaba-e43f73b4a54e" >
		<foreach doc:name="For Each" doc:id="504620cf-a6d0-4517-bb29-172b0b894e44" >
			<kafka:seek offset="#[payload.offset]" doc:name="Seek" doc:id="7e99d592-5097-432f-8884-31100713290f" config-ref="Apache_Kafka_Consumer_configuration" topic="${kafka.topic}" partition="#[payload.partition]"/>
		</foreach>
		<ee:transform doc:name="Transform Message" doc:id="ef4271e0-13cb-4732-b55a-a5fe8dd08898" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
"Seek request accepted."]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</sub-flow>
	<sub-flow name="start-orders" doc:id="984e2f23-6c11-4536-aef3-30fbd684a319" >
		<scripting:execute engine="Groovy" doc:name="Execute" doc:id="7e5f0f5e-e4a1-42e2-8757-394126074928" target="httpStatus">
			<scripting:code ><![CDATA[flow = registry.lookupByName('consume-orders').get();
if (flow.isStopped()) {
flow.start()
return 200
}
else return 304]]></scripting:code>
		</scripting:execute>
		<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
"Listener started."]]></ee:set-payload>
            </ee:message>
        </ee:transform>
	</sub-flow>
</mule>
